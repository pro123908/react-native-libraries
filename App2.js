// /**
//  * Sample React Native App
//  * https://github.com/facebook/react-native
//  *
//  * @format
//  * @flow strict-local
//  */

// import React, {useEffect} from 'react';
// import {
//   SafeAreaView,
//   StyleSheet,
//   ScrollView,
//   View,
//   Text,
//   StatusBar,
//   FlatList,
// } from 'react-native';

// import {
//   Header,
//   LearnMoreLinks,
//   Colors,
//   DebugInstructions,
//   ReloadInstructions,
// } from 'react-native/Libraries/NewAppScreen';

// import styled from 'styled-components/native';
// var PushNotification = require('react-native-push-notification');

// // const GlobalStyles = createGlobalStyle`
// //   @import url('https://fonts.googleapis.com/css?family=Notable');
// //   body {
// //     font-family: 'Notable', sans-serif;
// //   }
// // `;

// // const GlobalStyles = styled.createGlobalStyle`
// //   body {
// //     font-size: 20px;
// //   }
// // `;

// const styles = StyleSheet.create({
//   container: {
//     paddingTop: 20,
//     paddingLeft: 10,
//     paddingRight: 20,
//   },
//   titleStyles: {
//     fontFamily: 'PoppinsRegular',
//     fontSize: 20,
//     marginBottom: 5,
//   },

//   paraStyles: {
//     fontFamily: 'PoppinsRegular',
//     fontSize: 16,
//     textAlign: 'justify',
//   },
// });

// // const Container = styled.View`
// //   padding: 10px;
// // `;

// // const Title = styled.Text`
// //   font-size: 30px;
// //   font-weight: bold;

// //   opacity: 0.8;
// // `;

// const App = () => {
//   useEffect(() => {
//     console.log('running...');
//     PushNotification.configure({
//       // (optional) Called when Token is generated (iOS and Android)
//       onRegister: function (token) {
//         console.log('TOKEN:', token);
//       },

//       //   onRegister: handler.onRegister.bind(handler),

//       // (required) Called when a remote is received or opened, or local notification is opened
//       onNotification: function (notification) {
//         console.log('NOTIFICATION:', notification);

//         // process the notification

//         // (required) Called when a remote is received or opened, or local notification is opened
//         // notification.finish(PushNotificationIOS.FetchResult.NoData);
//       },
//       //   onNotification: handler.onNotification.bind(handler),

//       // (optional) Called when Registered Action is pressed and invokeApp is false, if true onNotification will be called (Android)
//       // onAction: function (notification) {
//       //   console.log('ACTION:', notification.action);
//       //   console.log('NOTIFICATION:', notification);

//       //   // process the action
//       // },
//       //   onAction: handler.onAction.bind(handler),

//       // (optional) Called when the user fails to register for remote notifications. Typically occurs when APNS is having issues, or the device is a simulator. (iOS)
//       // onRegistrationError: function (err) {
//       //   console.error(err.message, err);
//       // },
//       //   onRegistrationError: handler.onRegistrationError.bind(handler),

//       // IOS ONLY (optional): default: all - Permissions to register.
//       permissions: {
//         alert: true,
//         badge: true,
//         sound: true,
//       },

//       // Should the initial notification be popped automatically
//       // default: true
//       popInitialNotification: true,

//       /**
//        * (optional) default: true
//        * - Specified if permissions (ios) and token (android and ios) will requested or not,
//        * - if not, you must call PushNotificationsHandler.requestPermissions() later
//        * - if you are not using remote notification or do not have Firebase installed, use this:
//        *     requestPermissions: Platform.OS === 'ios'
//        */
//       // requestPermissions: true,
//       requestPermissions: Platform.OS === 'ios',
//     });

//     testNotification();
//     cancelNotifications();

//     // scheduleNotification();
//   }, []);

//   const cancelNotifications = () => {
//     PushNotification.cancelAllLocalNotifications();
//   };

//   const scheduleNotification = () => {
//     PushNotification.localNotificationSchedule({
//       //... You can use all the options from localNotifications
//       message: 'My Schedule Notification Message', // (required)
//       date: new Date(Date.now() + 10 * 1000), // in 10 secs
//     });
//   };

//   const testNotification = () => [
//     PushNotification.localNotification({
//       title: 'My Notification Title', // (optional)
//       message: 'My Notification Message', // (required)
//       id: 0, // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID

//       userInfo: {
//         name: 'Bilal Ahmad',
//       }, // (optional) default: {} (using null throws a JSON value '<null>' error)
//       playSound: true, // (optional) default: true
//       soundName: 'default', // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)
//       // number: 'none', // (optional) Valid 32 bit integer specified as string. default: none (Cannot be zero)
//       // repeatType: 'day', // (optional) Repeating interval. Check 'Repeating Notifications' section for more info.
//       bigText: 'My big text that will be shown when notification is expanded', // (optional) default: "message" prop
//       subText: 'This is a subText', // (optional) default: none
//       color: 'red', // (optional) default: system default
//       vibrate: false, // (optional) default: true
//       vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
//       tag: 'some_tag', // (optional) add tag to message
//       group: 'group', // (optional) add group to message
//       groupSummary: false, // (optional) set this notification to be the group summary for a group of notifications, default: false
//       ongoing: false, // (optional) set whether this is an "ongoing" notification
//       priority: 'high', // (optional) set notification priority, default: high
//       visibility: 'private', // (optional) set notification visibility, default: private
//       importance: 'high', // (optional) set notification importance, default: high
//       allowWhileIdle: false, // (optional) set notification to work while on doze, default: false
//       ignoreInForeground: false, // (optional) if true, the notification will not be visible when the app is in the foreground (useful for parity with how iOS notifications appear)
//       shortcutId: 'shortcut-id', // (optional) If this notification is duplicative of a Launcher shortcut, sets the id of the shortcut, in case the Launcher wants to hide the shortcut, default undefined
//       channelId: 'your-custom-channel-id', // (optional) custom channelId, if the channel doesn't exist, it will be created with options passed above (importance, vibration, sound). Once the channel is created, the channel will not be update. Make sure your channelId is different if you change these options. If you have created a custom channel, it will apply options of the channel.
//       onlyAlertOnce: false, //(optional) alert will open only once with sound and notify, default: false
//       messageId: 'google:message_id', // (optional) added as `message_id` to intent extras so opening push notification can find data stored by @react-native-firebase/messaging module.

//       actions: '["Yes", "No"]', // (Android only) See the doc for notification actions to know more
//       invokeApp: true, // (optional) This enable click on actions to bring back the application to foreground or stay in background, default: true
//     }),
//   ];

//   return (
//     <View style={styles.container}>
//       <Text style={styles.titleStyles}>This is the Title changed</Text>
//       <Text style={styles.paraStyles}>
//         This is the bit lengthier text to show a paragraph length text on the
//         device just to make things simple to look
//       </Text>
//       <View>
//         <FlatList></FlatList>
//       </View>
//     </View>
//   );
// };
// export default App;
